{
	"info": {
		"_postman_id": "75d83608-30da-4de6-b305-6e4b27c6d0f2",
		"name": "Chatter Backend API",
		"description": "Col·lecció per provar el backend de Chatter. Aquesta col·lecció conté exemples per provar les rutes d'auth, bios, chat, kiss i usuaris.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39746665",
		"_collection_link": "https://grup08.postman.co/workspace/SkibidiToilet~d4d45373-5a07-4ebd-a833-8cde78670f62/collection/39746665-75d83608-30da-4de6-b305-6e4b27c6d0f2?action=share&source=collection_link&creator=39746665"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains JWT token\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.jwt_token).to.be.a(\"string\");",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.environment.set(\"jwtToken\", jsonData.jwt_token);",
									"    pm.environment.set(\"userId\", jsonData._id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{email}}\",\n  \"contrasenya\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"email\"));",
									"    pm.expect(jsonData.jwt_token).to.be.a(\"string\");",
									"    pm.environment.set(\"jwt_token\", jsonData.jwt_token);",
									"    pm.environment.set(\"userId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nom\": \"Test\",\n  \"cognoms\": \"User\",\n  \"email\": \"{{email}}\",\n  \"contrasenya\": \"{{password}}\",\n  \"data_naixement\": \"2000-01-01\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Password changed successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Password changed successfully.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"contrasenya\": \"patata\",\n  \"new_contrasenya\": \"patata\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is empty\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.eql({});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains JWT token\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.jwt_token).to.be.a(\"string\");",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.environment.set(\"jwtToken\", jsonData.jwt_token);",
									"    pm.environment.set(\"userId\", jsonData._id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{email}}\",\n  \"contrasenya\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bios",
			"item": [
				{
					"name": "List All Bios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns bios array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/bios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"bios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Bios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All bios belong to current user\", function () {",
									"    pm.response.json().forEach(bio => {",
									"        pm.expect(bio.autor.email).to.eql(pm.environment.get(\"email\"));",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/bios/mine",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"bios",
								"mine"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Bio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Bio created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.bio).to.exist;",
									"    pm.environment.set(\"bioId\", jsonData.bio._id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nom\": \"Example Bio\",\n  \"url\": \"http://example.com\",\n  \"tags\": [\"tag1\", \"tag2\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/bios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"bios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Bio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Bio updated correctly\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.bio.nom).to.eql(\"Updated Bio\");",
									"    pm.expect(jsonData.bio.url).to.eql(\"http://updated.com\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nom\": \"Updated Bio\",\n  \"url\": \"http://updated.com\",\n  \"tags\": [\"updated\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/bios/{{bioId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"bios",
								"{{bioId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Delete confirmation received\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Bio esborrada correctament\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/bios/{{bioId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"bios",
								"{{bioId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chat",
			"item": [
				{
					"name": "Client Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns client count\", function () {",
									"    pm.expect(pm.response.json().clients).to.be.a(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/chat/online",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"chat",
								"online"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messages sorted by date\", function () {",
									"    const messages = pm.response.json();",
									"    for(let i = 1; i < messages.length; i++) {",
									"        pm.expect(new Date(messages[i-1].createdAt)).to.be.below(new Date(messages[i].createdAt));",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/chat/messages?user1={{user1}}&user2={{user2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"chat",
								"messages"
							],
							"query": [
								{
									"key": "user1",
									"value": "{{user1}}"
								},
								{
									"key": "user2",
									"value": "{{user2}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Kiss",
			"item": [
				{
					"name": "Create Kiss",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Kiss created successfully\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Kiss afegit correctament\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromEmail\": \"{{fromEmail}}\",\n  \"targetEmail\": \"target@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/kiss",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"kiss"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Kiss",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Kiss deleted successfully\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Kiss desfet correctament\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromEmail\": \"{{fromEmail}}\",\n  \"targetEmail\": \"target@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/kiss",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"kiss"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Kisses for Bio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns kiss data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"count\");",
									"    pm.expect(jsonData).to.have.property(\"fromEmails\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/kiss/bio/{{bioId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"kiss",
								"bio",
								"{{bioId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Usuaris",
			"item": [
				{
					"name": "List Usuaris",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns users array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/usuaris",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"usuaris"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Usuari by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns correct user\", function () {",
									"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"userId\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/usuaris/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"usuaris",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile updated\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.usuari.nom).to.eql(\"Updated\");",
									"    pm.expect(jsonData.usuari.descripcio).to.eql(\"Updated description\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{jwtToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nom\": \"Updated\",\n  \"cognoms\": \"User\",\n  \"email\": \"{{email}}\",\n  \"descripcio\": \"Updated description\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/usuaris/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"usuaris",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "jwt",
		"jwt": [
			{
				"key": "algorithm",
				"value": "HS256",
				"type": "string"
			},
			{
				"key": "isSecretBase64Encoded",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "payload",
				"value": "{}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "headerPrefix",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "queryParamKey",
				"value": "token",
				"type": "string"
			},
			{
				"key": "header",
				"value": "{}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		},
		{
			"key": "jwtToken",
			"value": ""
		},
		{
			"key": "bioId",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "email",
			"value": "test@example.com"
		},
		{
			"key": "password",
			"value": "password123"
		},
		{
			"key": "fromEmail",
			"value": "test@example.com"
		},
		{
			"key": "user1",
			"value": "user1@example.com"
		},
		{
			"key": "user2",
			"value": "user2@example.com"
		}
	]
}